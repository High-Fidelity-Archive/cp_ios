<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/HRRestModel.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/HRRestModel</TokenIdentifier>
			<Abstract type="html">This class allows you to easily interact with RESTful resources.  Responses are automatically
converted to the proper Objective-C type.  You can use this class directly or subclass it.</Abstract>
			<DeclaredIn>HRRestModel.h</DeclaredIn>
			
			<NodeRef refid="5"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/HRRestModel/delegate</TokenIdentifier>
			<Abstract type="html">Returns the HRResponseDelegate</Abstract>
			<DeclaredIn>HRRestModel.h</DeclaredIn>			
			
			<Declaration>+ (NSObject *)delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/HRRestModel/setDelegate:</TokenIdentifier>
			<Abstract type="html">Set the HRResponseDelegate</Abstract>
			<DeclaredIn>HRRestModel.h</DeclaredIn>			
			
			<Declaration>+ (void)setDelegate:(NSObject *)del</Declaration>
			<Parameters>
				<Parameter>
					<Name>del</Name>
					<Abstract type="html">The HRResponseDelegate responsible for handling callbacks</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDelegate:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/HRRestModel/baseURL</TokenIdentifier>
			<Abstract type="html">The base url to use in every request</Abstract>
			<DeclaredIn>HRRestModel.h</DeclaredIn>			
			
			<Declaration>+ (NSURL *)baseURL</Declaration>
			
			
			<Anchor>//api/name/baseURL</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/HRRestModel/setBaseURL:</TokenIdentifier>
			<Abstract type="html">Set the base URL to be used in every request.</Abstract>
			<DeclaredIn>HRRestModel.h</DeclaredIn>			
			
			<Declaration>+ (void)setBaseURL:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The base uri used in all request</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setBaseURL:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/HRRestModel/headers</TokenIdentifier>
			<Abstract type="html">Default headers sent with every request</Abstract>
			<DeclaredIn>HRRestModel.h</DeclaredIn>			
			
			<Declaration>+ (NSDictionary *)headers</Declaration>
			
			
			<Anchor>//api/name/headers</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/HRRestModel/setHeaders:</TokenIdentifier>
			<Abstract type="html">Set the default headers sent with every request.</Abstract>
			<DeclaredIn>HRRestModel.h</DeclaredIn>			
			
			<Declaration>+ (void)setHeaders:(NSDictionary *)hdrs</Declaration>
			<Parameters>
				<Parameter>
					<Name>hdrs</Name>
					<Abstract type="html">An NSDictionary of headers.  For example you can
set this up.

@code
NSDictionary *hdrs = [NSDictionary dictionaryWithObject:@&quot;application/json&quot; forKey:@&quot;Accept&quot;];
[self setHeaders:hdrs];
@endcode</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setHeaders:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/HRRestModel/basicAuth</TokenIdentifier>
			<Abstract type="html">Returns a dictionary containing the username and password used for basic auth.</Abstract>
			<DeclaredIn>HRRestModel.h</DeclaredIn>			
			
			<Declaration>+ (NSDictionary *)basicAuth</Declaration>
			
			
			<Anchor>//api/name/basicAuth</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/HRRestModel/setBasicAuthWithUsername:password:</TokenIdentifier>
			<Abstract type="html">Set the username and password used in requests that require basic authentication.</Abstract>
			<DeclaredIn>HRRestModel.h</DeclaredIn>			
			
			<Declaration>+ (void)setBasicAuthWithUsername:(NSString *)username password:(NSString *)password</Declaration>
			<Parameters>
				<Parameter>
					<Name>username</Name>
					<Abstract type="html">user name used to authenticate</Abstract>
				</Parameter><Parameter>
					<Name>password</Name>
					<Abstract type="html">Password used to authenticate</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setBasicAuthWithUsername:password:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/HRRestModel/defaultParams</TokenIdentifier>
			<Abstract type="html">Default params sent with every request.</Abstract>
			<DeclaredIn>HRRestModel.h</DeclaredIn>			
			
			<Declaration>+ (NSDictionary *)defaultParams</Declaration>
			
			
			<Anchor>//api/name/defaultParams</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/HRRestModel/setDefaultParams:</TokenIdentifier>
			<Abstract type="html">Set the defaul params sent with every request.
If you need to send something with every request this is the perfect way to do it.
For GET request, these parameters will be appended to the query string.  For
POST request these parameters are sent with the body.</Abstract>
			<DeclaredIn>HRRestModel.h</DeclaredIn>			
			
			<Declaration>+ (void)setDefaultParams:(NSDictionary *)params</Declaration>
			
			
			<Anchor>//api/name/setDefaultParams:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/HRRestModel/format</TokenIdentifier>
			<Abstract type="html">The format used to decode and encode request and responses.
Supported formats are JSON and XML.</Abstract>
			<DeclaredIn>HRRestModel.h</DeclaredIn>			
			
			<Declaration>+ (HRDataFormat)format</Declaration>
			
			
			<Anchor>//api/name/format</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/HRRestModel/setFormat:</TokenIdentifier>
			<Abstract type="html">Set the format used to decode and encode request and responses.</Abstract>
			<DeclaredIn>HRRestModel.h</DeclaredIn>			
			
			<Declaration>+ (void)setFormat:(HRDataFormat)format</Declaration>
			
			
			<Anchor>//api/name/setFormat:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/HRRestModel/getPath:withOptions:object:</TokenIdentifier>
			<Abstract type="html">Send a GET request</Abstract>
			<DeclaredIn>HRRestModel.h</DeclaredIn>			
			
			<Declaration>+ (NSOperation *)getPath:(NSString *)path withOptions:(NSDictionary *)options object:(id)object</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">The path to get.  If you haven&apos;t setup the baseURL option you&apos;ll need to provide a
full url.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The options for this request.</Abstract>
				</Parameter><Parameter>
					<Name>object</Name>
					<Abstract type="html">An object to be passed to the delegate methods</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getPath:withOptions:object:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/HRRestModel/postPath:withOptions:object:</TokenIdentifier>
			<Abstract type="html">Send a POST request</Abstract>
			<DeclaredIn>HRRestModel.h</DeclaredIn>			
			
			<Declaration>+ (NSOperation *)postPath:(NSString *)path withOptions:(NSDictionary *)options object:(id)object</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">The path to POST to.  If you haven&apos;t setup the baseURL option you&apos;ll need to provide a
full url.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The options for this request.</Abstract>
				</Parameter><Parameter>
					<Name>object</Name>
					<Abstract type="html">An object to be passed to the delegate methods

&lt;strong&gt;Note:&lt;/strong&gt; If you&apos;d like to post raw data like JSON or XML you&apos;ll need to set the &lt;tt&gt;body&lt;/tt&gt; option.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/postPath:withOptions:object:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/HRRestModel/putPath:withOptions:object:</TokenIdentifier>
			<Abstract type="html">Send a PUT request</Abstract>
			<DeclaredIn>HRRestModel.h</DeclaredIn>			
			
			<Declaration>+ (NSOperation *)putPath:(NSString *)path withOptions:(NSDictionary *)options object:(id)object</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">The path to PUT to.  If you haven&apos;t setup the baseURL option you&apos;ll need to provide a
full url.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The options for this request.</Abstract>
				</Parameter><Parameter>
					<Name>object</Name>
					<Abstract type="html">An object to be passed to the delegate methods

@remarks &lt;strong&gt;Note:&lt;/strong&gt;  All data found in the &lt;tt&gt;body&lt;/tt&gt; option will be PUT.  Setting the &lt;tt&gt;body&lt;/tt&gt;
option will cause the &lt;tt&gt;params&lt;/tt&gt; option to be ignored.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/putPath:withOptions:object:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/HRRestModel/deletePath:withOptions:object:</TokenIdentifier>
			<Abstract type="html">Send a DELETE request</Abstract>
			<DeclaredIn>HRRestModel.h</DeclaredIn>			
			
			<Declaration>+ (NSOperation *)deletePath:(NSString *)path withOptions:(NSDictionary *)options object:(id)object</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">The path to DELETE.  If you haven&apos;t setup the baseURL option you&apos;ll need to provide a
full url.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">The options for this request.</Abstract>
				</Parameter><Parameter>
					<Name>object</Name>
					<Abstract type="html">An object to be passed to the delegate methods</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deletePath:withOptions:object:</Anchor>
		</Token>
		
	</File>
</Tokens>